// Code generated by MockGen. DO NOT EDIT.
// Source: repository/thread_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	entity "go_forum/main/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockThreadRepository is a mock of ThreadRepository interface.
type MockThreadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThreadRepositoryMockRecorder
}

// MockThreadRepositoryMockRecorder is the mock recorder for MockThreadRepository.
type MockThreadRepositoryMockRecorder struct {
	mock *MockThreadRepository
}

// NewMockThreadRepository creates a new mock instance.
func NewMockThreadRepository(ctrl *gomock.Controller) *MockThreadRepository {
	mock := &MockThreadRepository{ctrl: ctrl}
	mock.recorder = &MockThreadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreadRepository) EXPECT() *MockThreadRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThreadRepository) Create(arg0 *entity.Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockThreadRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThreadRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockThreadRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockThreadRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockThreadRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockThreadRepository) Get(id uint) (*entity.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockThreadRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockThreadRepository)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockThreadRepository) GetAll() ([]*entity.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockThreadRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockThreadRepository)(nil).GetAll))
}

// GetReplies mocks base method.
func (m *MockThreadRepository) GetReplies(id uint) ([]*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplies", id)
	ret0, _ := ret[0].([]*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplies indicates an expected call of GetReplies.
func (mr *MockThreadRepositoryMockRecorder) GetReplies(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplies", reflect.TypeOf((*MockThreadRepository)(nil).GetReplies), id)
}

// Update mocks base method.
func (m *MockThreadRepository) Update(thread *entity.Thread) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", thread)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockThreadRepositoryMockRecorder) Update(thread interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThreadRepository)(nil).Update), thread)
}
