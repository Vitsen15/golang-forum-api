// Code generated by MockGen. DO NOT EDIT.
// Source: repository/reply_repository.go

// Package mock_repository is a generated GoMock package.
package repository

import (
	entity "go_forum/main/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReplyRepository is a mock of ReplyRepository interface.
type MockReplyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReplyRepositoryMockRecorder
}

// MockReplyRepositoryMockRecorder is the mock recorder for MockReplyRepository.
type MockReplyRepositoryMockRecorder struct {
	mock *MockReplyRepository
}

// NewMockReplyRepository creates a new mock instance.
func NewMockReplyRepository(ctrl *gomock.Controller) *MockReplyRepository {
	mock := &MockReplyRepository{ctrl: ctrl}
	mock.recorder = &MockReplyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplyRepository) EXPECT() *MockReplyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReplyRepository) Create(reply *entity.Reply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockReplyRepositoryMockRecorder) Create(reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReplyRepository)(nil).Create), reply)
}

// Delete mocks base method.
func (m *MockReplyRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReplyRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReplyRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockReplyRepository) Get(id uint) (*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReplyRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReplyRepository)(nil).Get), id)
}

// Update mocks base method.
func (m *MockReplyRepository) Update(reply *entity.Reply) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", reply)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReplyRepositoryMockRecorder) Update(reply interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReplyRepository)(nil).Update), reply)
}
